datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String          @id @default(uuid()) @db.Uuid
  firstName        String
  lastName         String
  username         String          @unique
  email            String          @unique
  password         String
  college          College?        @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  collegeId        String?         @db.Uuid
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  mfaSecret        String?
  lastLogin        DateTime?
  students         Student[]
  faculty          Faculty[]
  threadLikes      ThreadLike[]
  threadComments   ThreadComment[]
  messages         Messages[]
  userRole         UserRole?       @relation("UserToUserRole")
  resetToken       String?
  resetTokenExpiry DateTime?

  @@index([email])
  @@index([collegeId])
}

model UserRole {
  id           String      @id @default(uuid()) @db.Uuid
  userId       String      @unique @db.Uuid
  role         Role
  college      College?    @relation(fields: [collegeId], references: [id], name: "UserRoleToCollege", onDelete: Cascade)
  collegeId    String?     @db.Uuid
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?     @db.Uuid
  section      Section?    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId    String?     @db.Uuid
  user         User        @relation("UserToUserRole", fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime     @default(now())
  updatedAt DateTime    @updatedAt
}

enum Role {
  PRINCIPAL
  HOD
  FACULTY
  STUDENT
  CLASS_REPRESENTATIVE
  SUPER_ADMIN
}

model College {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique
  departments Department[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt DateTime    @updatedAt
  userRoles   UserRole[]   @relation(name: "UserRoleToCollege")
}

model Department {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  college   College    @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  collegeId String     @db.Uuid
  years     Year[]
  createdAt DateTime   @default(now())
  updatedAt DateTime    @updatedAt
  UserRole  UserRole[]

  @@index([collegeId])
}

model Year {
  id           String     @id @default(uuid()) @db.Uuid
  name         String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String     @db.Uuid
  sections     Section[]
  createdAt    DateTime   @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  @@index([departmentId])
}

model Section {
  id         String             @id @default(uuid()) @db.Uuid
  name       String
  year       Year               @relation(fields: [yearId], references: [id], onDelete: Cascade)
  yearId     String             @db.Uuid
  
  UserRole   UserRole[]
  createdAt  DateTime           @default(now())
  updatedAt DateTime    @updatedAt

  @@index([yearId])
}

model Student {
  id                       String                    @id @default(uuid()) @db.Uuid
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String                    @db.Uuid
  enrollmentNo             String                    @unique
  createdAt                DateTime                  @default(now())
  archivedAt               DateTime?
  submissions              AssignmentSubmission[]
  virtualClassroomStudents VirtualClassroomStudent[]
  classAttendances         ClassAttendance[]
  updatedAt DateTime    @updatedAt
}

model Faculty {
  id             String             @id @default(uuid()) @db.Uuid
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String             @db.Uuid
  specialization String
  classrooms     VirtualClassroom[]
  createdAt      DateTime           @default(now())
  updatedAt DateTime    @updatedAt
}

model VirtualClassroom {
  id                       String                    @id @default(uuid()) @db.Uuid
  name                     String
  faculty                  Faculty                   @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId                String                    @db.Uuid
  units                    Unit[]
  assignments              Assignment[]
  syllabusUrl              String
  classAttendances         ClassAttendance[]
  virtualClassroomStudents VirtualClassroomStudent[]
  createdAt                DateTime                  @default(now())
  updateAt                 DateTime                  @default(now())
  threads                  Thread[]

  @@index([facultyId])
}

model VirtualClassroomStudent {
  id          String           @id @default(uuid()) @db.Uuid
  classroom   VirtualClassroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String           @db.Uuid
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String           @db.Uuid
  enrolledAt  DateTime         @default(now())
    createdAt                DateTime                  @default(now())
  updateAt                 DateTime                  @default(now())

  @@unique([classroomId, studentId])
}

model Unit {
  id                  String               @id @default(uuid()) @db.Uuid
  name                String
  classroom           VirtualClassroom     @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId         String               @db.Uuid
  educationalContents EducationalContent[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  threads             Thread[]

  @@index([classroomId])
}

model EducationalContent {
  id        String      @id @default(uuid()) @db.Uuid
  unit      Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId    String      @db.Uuid
  type      ContentType
  content   String
  version   Int         @default(1)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([unitId])
}

enum ContentType {
  NOTE
  LINK
  VIDEO
  DOCUMENT
}

model ClassAttendance {
  id          String           @id @default(uuid()) @db.Uuid
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String           @db.Uuid
  classroom   VirtualClassroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String           @db.Uuid
  date        DateTime
  present     Boolean
    createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([studentId, classroomId])
}

model Assignment {
  id                    String                 @id @default(uuid()) @db.Uuid
  title                 String
  content               String
  deadline              DateTime
  classroom             VirtualClassroom       @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId           String                 @db.Uuid
  assignmentSubmissions AssignmentSubmission[]
  createdAt             DateTime               @default(now())
  updatedAt DateTime    @updatedAt

  @@index([classroomId])
}

model AssignmentSubmission {
  id           String     @id @default(uuid()) @db.Uuid
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String     @db.Uuid
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String     @db.Uuid
  content      String
  submittedAt  DateTime   @default(now())
    createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([assignmentId])
}

model Thread {
  id             String           @id @default(uuid()) @db.Uuid
  title          String
  content        String
  unit           Unit?            @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId         String?          @db.Uuid
  classroom      VirtualClassroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId    String           @db.Uuid
  parent         Thread?          @relation("ThreadReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId       String?          @db.Uuid
  threadLikes    ThreadLike[]
  threadComments ThreadComment[]
  messages       Messages[]
  createdAt      DateTime         @default(now())
  updatedAt DateTime    @updatedAt
  replies        Thread[]         @relation("ThreadReplies")

  @@index([classroomId])
  @@index([createdAt])
}

model ThreadLike {
  id        String   @id @default(uuid()) @db.Uuid
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([threadId, userId])
}

model ThreadComment {
  id        String   @id @default(uuid()) @db.Uuid
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([threadId])
}

model Messages {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([threadId])
  @@index([userId])
}
